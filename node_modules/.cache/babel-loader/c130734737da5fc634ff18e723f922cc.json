{"ast":null,"code":"var _jsxFileName = \"/Users/clint/Desktop/lms-app/LMS-APP/lms-frontend/src/landingPage/navigation/nav.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\"; // import components\n\nimport LogoBtn from \"./logo-btn/LogoBtn\";\nimport NavList from \"./NavList\";\nimport { Twirl as Hamburger } from \"hamburger-react\"; // import styles\n\nimport \"./nav.scss\";\n/* Hide scrollbar on scroll down. Reveal on scroll up*/\n// let prevScrollPos = window.pageYOffset;\n// window.onscroll = function () {\n//   let currentScrollPos = window.pageYOffset;\n//   if (prevScrollPos > currentScrollPos) {\n//     document.querySelector(\"nav\").style.top = \"0\";\n//   } else {\n//     document.querySelector(\"nav\").style.top = \"-90px\";\n//   }\n//   prevScrollPos = currentScrollPos;\n// };\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Nav = () => {\n  _s();\n\n  // State\n  const history = useHistory();\n  const [screenWidth, setScreenWidth] = useState(window.innerWidth);\n  const [showLinks, setShowLinks] = useState(false);\n  const [boxShadow, setBoxShadow] = useState(false);\n  const [isOpen, setOpen] = useState(false); // track change in width\n\n  useEffect(() => {\n    const changeWidth = () => {\n      setScreenWidth(window.innerWidth);\n    };\n\n    window.addEventListener(\"resize\", changeWidth); // Clean up\n\n    return () => {\n      window.removeEventListener(\"resize\", changeWidth);\n    };\n  }, [screenWidth]);\n  useEffect(() => {\n    // Toggles overflow hidden on the body\n    const preventScroll = () => {\n      // toggle when menu's open and only for mobile viewport\n      showLinks && screenWidth < 768 ? document.body.style.overflowY = \"hidden\" : document.body.style.overflowY = \"visible\";\n    };\n\n    preventScroll();\n  }, [showLinks, screenWidth]); // Sets navbar to position fixed\n\n  useEffect(() => {\n    const shadowNav = () => {\n      if (window.scrollY >= 90) {\n        setBoxShadow(true);\n      } else {\n        setBoxShadow(false);\n      }\n    };\n\n    window.addEventListener(\"scroll\", shadowNav); // clean up\n\n    return () => {\n      window.removeEventListener(\"scroll\", shadowNav);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"nav\", {\n    className: `${boxShadow ? \"shadow\" : \"\"}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${showLinks ? \"nav-center menu-open\" : \"nav-center\"}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-header\",\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          style: {\n            textDecoration: \"none\"\n          },\n          children: /*#__PURE__*/_jsxDEV(LogoBtn, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Hamburger, {\n          className: \"nav-toggle\",\n          color: \"#3a86ff\",\n          direction: \"left\",\n          label: \"Show menu\",\n          toggled: isOpen,\n          toggle: setOpen,\n          onToggle: toggled => {\n            if (toggled) {\n              // open a menu\n              setShowLinks(true);\n            } else {\n              // close a menu\n              setShowLinks(false);\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"links-container\",\n        children: /*#__PURE__*/_jsxDEV(NavList, {\n          setShowLinks: setShowLinks,\n          setOpen: setOpen\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-btns\",\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          to: \"/login\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn-primary\",\n            children: \"Sign in\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/signup\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn-secondary\",\n            children: \"Sign up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Nav, \"USUP9JyBkIw1AURiV1pMPMR6LXE=\", false, function () {\n  return [useHistory];\n});\n\n_c = Nav;\nexport default Nav;\n\nvar _c;\n\n$RefreshReg$(_c, \"Nav\");","map":{"version":3,"sources":["/Users/clint/Desktop/lms-app/LMS-APP/lms-frontend/src/landingPage/navigation/nav.js"],"names":["useState","useEffect","Link","useHistory","LogoBtn","NavList","Twirl","Hamburger","Nav","history","screenWidth","setScreenWidth","window","innerWidth","showLinks","setShowLinks","boxShadow","setBoxShadow","isOpen","setOpen","changeWidth","addEventListener","removeEventListener","preventScroll","document","body","style","overflowY","shadowNav","scrollY","textDecoration","toggled"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\n// import components\nimport LogoBtn from \"./logo-btn/LogoBtn\";\nimport NavList from \"./NavList\";\nimport { Twirl as Hamburger } from \"hamburger-react\";\n// import styles\nimport \"./nav.scss\";\n\n/* Hide scrollbar on scroll down. Reveal on scroll up*/\n// let prevScrollPos = window.pageYOffset;\n\n// window.onscroll = function () {\n//   let currentScrollPos = window.pageYOffset;\n//   if (prevScrollPos > currentScrollPos) {\n//     document.querySelector(\"nav\").style.top = \"0\";\n//   } else {\n//     document.querySelector(\"nav\").style.top = \"-90px\";\n//   }\n//   prevScrollPos = currentScrollPos;\n// };\n\nconst Nav = () => {\n  // State\n  const history = useHistory();\n  const [screenWidth, setScreenWidth] = useState(window.innerWidth);\n  const [showLinks, setShowLinks] = useState(false);\n  const [boxShadow, setBoxShadow] = useState(false);\n  const [isOpen, setOpen] = useState(false);\n\n  // track change in width\n  useEffect(() => {\n    const changeWidth = () => {\n      setScreenWidth(window.innerWidth);\n    };\n    window.addEventListener(\"resize\", changeWidth);\n    // Clean up\n    return () => {\n      window.removeEventListener(\"resize\", changeWidth);\n    };\n  }, [screenWidth]);\n\n  useEffect(() => {\n    // Toggles overflow hidden on the body\n    const preventScroll = () => {\n      // toggle when menu's open and only for mobile viewport\n      showLinks && screenWidth < 768\n        ? (document.body.style.overflowY = \"hidden\")\n        : (document.body.style.overflowY = \"visible\");\n    };\n    preventScroll();\n  }, [showLinks, screenWidth]);\n\n  // Sets navbar to position fixed\n  useEffect(() => {\n    const shadowNav = () => {\n      if (window.scrollY >= 90) {\n        setBoxShadow(true);\n      } else {\n        setBoxShadow(false);\n      }\n    };\n    window.addEventListener(\"scroll\", shadowNav);\n    // clean up\n    return () => {\n      window.removeEventListener(\"scroll\", shadowNav);\n    };\n  }, []);\n\n  return (\n    <nav className={`${boxShadow ? \"shadow\" : \"\"}`}>\n      <div className={`${showLinks ? \"nav-center menu-open\" : \"nav-center\"}`}>\n        <div className=\"nav-header\">\n          <Link to=\"/\" style={{ textDecoration: \"none\" }}>\n              <LogoBtn />\n          </Link>\n          <Hamburger\n            className=\"nav-toggle\"\n            color=\"#3a86ff\"\n            direction=\"left\"\n            label=\"Show menu\"\n            toggled={isOpen}\n            toggle={setOpen}\n            onToggle={(toggled) => {\n              if (toggled) {\n                // open a menu\n                setShowLinks(true);\n              } else {\n                // close a menu\n                setShowLinks(false);\n              }\n            }}\n          />\n        </div>\n        <div className=\"links-container\">\n          <NavList setShowLinks={setShowLinks} setOpen={setOpen} />\n        </div>\n        <div className=\"nav-btns\">\n          <Link to=\"/login\">\n            <button className=\"btn-primary\">Sign in</button>\n          </Link>\n          <Link to=\"/signup\">\n            <button className=\"btn-secondary\">Sign up</button>\n          </Link>\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nexport default Nav;\n"]},"metadata":{},"sourceType":"module"}